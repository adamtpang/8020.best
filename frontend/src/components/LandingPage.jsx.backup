import React, { useState } from 'react';
import { streamRankedTasks } from '../services/aiPrioritization';
import { useAuth } from '../contexts/AuthContext';
import CleanLoginDialog from './auth/CleanLoginDialog';
import UserMenu from './auth/UserMenu';

const LandingPage = () => {
    const [priorities, setPriorities] = useState(['', '', '']);
    const [tasks, setTasks] = useState('');
    const [showResults, setShowResults] = useState(false);
    const [isAnalyzing, setIsAnalyzing] = useState(false);
    const [rankedTasks, setRankedTasks] = useState([]);
    const [vitalFew, setVitalFew] = useState([]);
    const [trivialMany, setTrivialMany] = useState([]);
    const [hasError, setHasError] = useState(false);
    const [progress, setProgress] = useState(0);
    const [progressText, setProgressText] = useState('');
    const [totalTasks, setTotalTasks] = useState(0);
    const [showLoginDialog, setShowLoginDialog] = useState(false);

    const { user, isAuthenticated } = useAuth();

    const handlePriorityChange = (index, value) => {
        const newPriorities = [...priorities];
        newPriorities[index] = value;
        setPriorities(newPriorities);
    };

    const copyTaskSection = async (tasks, sectionTitle) => {
        const isHighValue = sectionTitle.includes('DO THESE');

        if (isHighValue) {
            const taskList = tasks.map((task, index) => `${index + 1}. ${task.task}`).join('\\n');
            const fullText = `${sectionTitle}\\n${'='.repeat(sectionTitle.length)}\\n\\n${taskList}\\n\\n✅ Focus on these first - they drive 80% of your results!`;

            try {
                await navigator.clipboard.writeText(fullText);
                setProgressText(`✅ Copied ${tasks.length} high-impact tasks! Paste into your daily planner.`);
                setTimeout(() => setProgressText(''), 3000);
            } catch (err) {
                console.error('Failed to copy:', err);
            }
        } else {
            const taskList = tasks.map(task => `• ${task.task}`).join('\\n');
            const fullText = `${sectionTitle}\\n${'='.repeat(sectionTitle.length)}\\n\\n${taskList}\\n\\n📁 Archive these in your "someday/maybe" list for later review.`;

            try {
                await navigator.clipboard.writeText(fullText);
                setProgressText(`📁 Copied ${tasks.length} low-impact tasks to archive! Clear them from your mind.`);
                setTimeout(() => setProgressText(''), 3000);
            } catch (err) {
                console.error('Failed to copy:', err);
            }
        }
    };

    const copyAllTasks = async () => {
        const vitalList = vitalFew.map((task, index) => `${index + 1}. ${task.task}`).join('\\n');
        const trivialList = trivialMany.map(task => `• ${task.task}`).join('\\n');

        const fullText = `80/20 TASK ANALYSIS RESULTS\\n${'='.repeat(30)}\\n\\n🔥 DO THESE FIRST (${vitalFew.length} tasks)\\n${'-'.repeat(40)}\\n${vitalList}\\n\\n✅ Focus on these - they drive 80% of your results!\\n\\n\\n🗂️ ARCHIVE THESE (${trivialMany.length} tasks)\\n${'-'.repeat(40)}\\n${trivialList}\\n\\n📁 Move these to your "someday/maybe" list.`;

        try {
            await navigator.clipboard.writeText(fullText);
            setProgressText(`📋 Copied complete 80/20 breakdown! Paste into your task manager.`);
            setTimeout(() => setProgressText(''), 3000);
        } catch (err) {
            console.error('Failed to copy:', err);
        }
    };

    const processTasksOneByOne = async (taskArray, userPriorities, totalTaskCount) => {
        let processedTasks = [];

        console.log(`Processing ${taskArray.length} tasks one by one`);

        try {
            await new Promise((resolve, reject) => {
                streamRankedTasks(taskArray, userPriorities, {
                    onData: (newRankedTask) => {
                        console.log('Received task data:', newRankedTask);
                        processedTasks.push(newRankedTask);
                        setRankedTasks(prevTasks => {
                            const updated = [...prevTasks, newRankedTask];
                            const overallProgress = 20 + (updated.length / totalTaskCount) * 60;
                            setProgress(overallProgress);

                            const taskPreview = newRankedTask.task.length > 50
                                ? newRankedTask.task.substring(0, 50) + '...'
                                : newRankedTask.task;
                            setProgressText(`✓ Rated "${taskPreview}" → Impact Score: ${newRankedTask.impact_score} (${updated.length}/${totalTaskCount})`);
                            return updated;
                        });
                    },
                    onError: (error) => {
                        console.error('Analysis error:', error);
                        reject(error);
                    },
                    onClose: () => {
                        console.log('Analysis completed');
                        resolve();
                    }
                });
            });

            setProgress(80);
            setProgressText('Categorizing your tasks by impact...');

            const allTasks = [...processedTasks];
            const sortedTasks = allTasks.sort((a, b) => (b.impact_score || 0) - (a.impact_score || 0));

            const splitPoint = Math.ceil(sortedTasks.length * 0.2);
            const vitalFewTasks = sortedTasks.slice(0, splitPoint);
            const trivialManyTasks = sortedTasks.slice(splitPoint);

            setVitalFew(vitalFewTasks);
            setTrivialMany(trivialManyTasks);

            setProgress(100);
            setProgressText(`Analysis complete! ${vitalFewTasks.length} vital few, ${trivialManyTasks.length} trivial many`);
            setIsAnalyzing(false);

        } catch (error) {
            console.error('Error processing tasks:', error);
            setIsAnalyzing(false);
            setHasError(true);
        }
    };

    const handleAnalyze = async () => {
        if (!priorities.some(p => p.trim()) || !tasks.trim()) {
            alert('Please enter both your priorities and tasks');
            return;
        }

        const taskArray = tasks.split('\\n').filter(task => task.trim());
        const taskCount = taskArray.length;
        const totalChars = tasks.length;

        const MAX_TASKS = 1000;
        const MAX_CHARS = 1000000;

        if (taskCount > MAX_TASKS) {
            alert(`Too many tasks! Please limit to ${MAX_TASKS} tasks or less.`);
            return;
        }

        if (totalChars > MAX_CHARS) {
            alert(`Task list too long! Please limit to ${MAX_CHARS} characters or less.`);
            return;
        }

        setIsAnalyzing(true);
        setShowResults(true);
        setRankedTasks([]);
        setVitalFew([]);
        setTrivialMany([]);
        setHasError(false);
        setProgress(0);
        setTotalTasks(taskCount);
        setProgressText(`Initializing analysis for ${taskCount} tasks...`);

        try {
            setProgress(10);
            setProgressText('Saving your priorities...');
            setProgress(20);
            setProgressText('Starting AI analysis...');

            const userPriorities = priorities.filter(p => p.trim()).map((p, i) => `${i + 1}. ${p}`).join('\\n');

            await processTasksOneByOne(taskArray, userPriorities, taskCount);

        } catch (error) {
            console.error('Error during analysis:', error);
            setHasError(true);
            setIsAnalyzing(false);
            setProgress(0);
            setProgressText('');
        }
    };

    return (
        <div className="min-h-screen bg-background">
            {/* Header */}
            <header className="border-b border-border">
                <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex h-16 items-center justify-between">
                        <h1 className="text-2xl font-bold text-foreground">8020.best</h1>

                        <div className="flex items-center space-x-4">
                            {isAuthenticated ? (
                                <div className="flex items-center space-x-3">
                                    <button
                                        onClick={() => window.open('https://buy.stripe.com/bIYeXH6aL8EG18c5ko', '_blank')}
                                        className="bg-purple-500/20 text-purple-400 px-3 py-1 rounded-full text-sm font-medium hover:bg-purple-500/30 transition-colors"
                                    >
                                        {user?.credits || 0} credits +
                                    </button>
                                    <UserMenu />
                                </div>
                            ) : (
                                <button
                                    onClick={() => setShowLoginDialog(true)}
                                    className="border border-border text-foreground px-4 py-2 rounded-lg text-sm font-medium hover:bg-accent transition-colors"
                                >
                                    Sign In
                                </button>
                            )}
                        </div>
                    </div>
                </div>
            </header>

            <main className="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
                {/* Hero Section */}
                <section className="text-center mb-16">
                    <h1 className="text-4xl sm:text-6xl lg:text-7xl font-bold tracking-tight text-foreground mb-6 text-balance">
                        Stop drowning in tasks.
                        <br />
                        <span className="text-purple-400">Start living.</span>
                    </h1>
                    <p className="mx-auto max-w-2xl text-lg leading-8 text-muted-foreground mb-8 text-pretty">
                        AI instantly identifies the <strong>vital 20%</strong> of tasks that drive <strong>80%</strong> of your results.
                        Archive the rest. Reclaim your time.
                    </p>

                    {/* Value Props */}
                    <div className="flex justify-center gap-8 mb-12 flex-wrap">
                        <div className="text-center max-w-48">
                            <div className="text-4xl mb-2">⚡</div>
                            <h3 className="font-semibold text-purple-400 text-sm mb-1">INSTANT CLARITY</h3>
                            <p className="text-muted-foreground text-sm">Know exactly what matters in 60 seconds</p>
                        </div>
                        <div className="text-center max-w-48">
                            <div className="text-4xl mb-2">🗂️</div>
                            <h3 className="font-semibold text-purple-400 text-sm mb-1">ARCHIVE EVERYTHING</h3>
                            <p className="text-muted-foreground text-sm">Copy & paste your priorities, archive the rest</p>
                        </div>
                        <div className="text-center max-w-48">
                            <div className="text-4xl mb-2">🧠</div>
                            <h3 className="font-semibold text-purple-400 text-sm mb-1">MENTAL FREEDOM</h3>
                            <p className="text-muted-foreground text-sm">Stop carrying mental load of endless tasks</p>
                        </div>
                    </div>

                    {/* Buy Credits CTA - only show if not authenticated */}
                    {!isAuthenticated && (
                        <div className="mb-12">
                            <p className="text-muted-foreground text-sm mb-4">Need more analyses? Get AI credits:</p>
                            <a
                                href="https://buy.stripe.com/bIYeXH6aL8EG18c5ko"
                                target="_blank"
                                rel="noopener noreferrer"
                                className="inline-flex items-center px-6 py-3 border border-purple-500 text-purple-400 rounded-lg font-medium hover:bg-purple-500/10 transition-colors"
                            >
                                💳 Buy AI Credits
                            </a>
                        </div>
                    )}
                </section>

                {/* How It Works */}
                <section className="mb-12 p-8 bg-card rounded-lg border border-border">
                    <h2 className="text-3xl font-bold text-center text-foreground mb-8">How It Works (60 seconds to clarity)</h2>
                    <div className="grid md:grid-cols-3 gap-8 max-w-4xl mx-auto">
                        <div>
                            <div className="text-2xl mb-3">1️⃣</div>
                            <h3 className="font-bold text-foreground mb-2">Tell AI your priorities</h3>
                            <p className="text-muted-foreground text-sm">"Financial freedom", "Health", "Family time" - whatever matters most to you right now.</p>
                        </div>
                        <div>
                            <div className="text-2xl mb-3">2️⃣</div>
                            <h3 className="font-bold text-foreground mb-2">Dump all your tasks</h3>
                            <p className="text-muted-foreground text-sm">Brain dump everything - emails, errands, projects, calls. One per line.</p>
                        </div>
                        <div>
                            <div className="text-2xl mb-3">3️⃣</div>
                            <h3 className="font-bold text-foreground mb-2">Get instant clarity</h3>
                            <p className="text-muted-foreground text-sm">AI sorts tasks by impact. Copy the vital few to your planner. Archive the rest.</p>
                        </div>
                    </div>
                </section>

                {/* Input Section */}
                <div className="max-w-2xl mx-auto space-y-6">
                    {/* Priorities */}
                    <div className="bg-card rounded-lg border border-border p-6">
                        <div className="mb-4">
                            <h2 className="text-lg font-bold text-purple-400 mb-1">Your Top 3 Life Priorities</h2>
                            <p className="text-muted-foreground text-sm">What matters most to you right now?</p>
                        </div>
                        <div className="space-y-3">
                            {priorities.map((priority, index) => (
                                <input
                                    key={index}
                                    type="text"
                                    placeholder={`Priority ${index + 1} (e.g., "Financial freedom", "Health", "Family")`}
                                    value={priority}
                                    onChange={(e) => handlePriorityChange(index, e.target.value)}
                                    className="w-full bg-input text-foreground border border-border rounded-md px-3 py-2 text-sm placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-ring"
                                />
                            ))}
                        </div>
                    </div>

                    {/* Tasks */}
                    <div className="bg-card rounded-lg border border-border p-6">
                        <div className="mb-4">
                            <h2 className="text-lg font-bold text-purple-400 mb-1">📝 Your Tasks</h2>
                            <p className="text-muted-foreground text-sm">List everything on your mind, one per line</p>
                        </div>
                        <textarea
                            placeholder="Write your tasks here...
Clean inbox
Call mom
Book flight
Plan project kickoff
Review budget"
                            rows={6}
                            value={tasks}
                            onChange={(e) => setTasks(e.target.value)}
                            className="w-full bg-input text-foreground border border-border rounded-md px-3 py-2 text-sm placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-ring resize-none"
                        />
                        <div className={`mt-2 text-xs ${
                            tasks.length > 1000000 || tasks.split('\\n').filter(t => t.trim()).length > 1000
                                ? 'text-red-400'
                                : 'text-muted-foreground'
                        }`}>
                            {tasks.split('\\n').filter(t => t.trim()).length} tasks • {tasks.length} characters
                            (limit: 1,000 tasks, 1,000,000 characters)
                        </div>
                    </div>

                    {/* Analyze Button */}
                    <div className="text-center">
                        <button
                            onClick={handleAnalyze}
                            disabled={isAnalyzing}
                            className="bg-primary text-primary-foreground px-8 py-3 rounded-lg font-bold text-lg hover:opacity-90 transition-opacity disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isAnalyzing ? 'Analyzing...' : 'Analyze'} →
                        </button>
                    </div>

                    {/* Results */}
                    {showResults && (
                        <div className="bg-card rounded-lg border border-purple-500/50 p-0 overflow-hidden">
                            {/* Header */}
                            <div className="p-6 border-b border-border">
                                <h2 className="text-xl font-bold text-purple-400 mb-2">80/20 Analysis Results</h2>
                                {!isAnalyzing && !hasError && vitalFew.length > 0 && (
                                    <p className="text-muted-foreground text-sm">
                                        {vitalFew.length} vital tasks • {trivialMany.length} trivial tasks • Click any section to copy
                                    </p>
                                )}
                            </div>

                            {/* Progress */}
                            {isAnalyzing && (
                                <div className="p-6">
                                    <div className="flex items-center justify-between mb-3">
                                        <p className="text-sm font-medium text-purple-400">{progressText}</p>
                                        <span className="text-xs text-muted-foreground">{Math.round(progress)}%</span>
                                    </div>
                                    <div className="w-full bg-secondary rounded-full h-2">
                                        <div
                                            className="bg-purple-500 h-2 rounded-full transition-all duration-300"
                                            style={{ width: `${progress}%` }}
                                        ></div>
                                    </div>
                                </div>
                            )}

                            {/* Error State */}
                            {hasError && (
                                <div className="p-6">
                                    <p className="text-red-400 text-sm">Analysis failed. Please try again.</p>
                                </div>
                            )}

                            {/* Results */}
                            {!isAnalyzing && !hasError && vitalFew.length > 0 && (
                                <>
                                    {/* Action Buttons */}
                                    <div className="p-6 border-b border-border bg-secondary/20 flex gap-3 flex-wrap">
                                        <button
                                            onClick={() => copyTaskSection(vitalFew, '🔥 DO THESE FIRST (80% of your results)')}
                                            className="bg-primary text-primary-foreground px-4 py-2 rounded-md font-medium text-sm hover:opacity-90 transition-opacity"
                                        >
                                            📋 Copy DO THESE tasks
                                        </button>
                                        <button
                                            onClick={() => copyTaskSection(trivialMany, '🗂️ ARCHIVE THESE (Low impact)')}
                                            className="border border-border text-muted-foreground px-4 py-2 rounded-md font-medium text-sm hover:bg-accent transition-colors"
                                        >
                                            🗂️ Copy ARCHIVE tasks
                                        </button>
                                        <button
                                            onClick={() => copyAllTasks()}
                                            className="text-muted-foreground px-4 py-2 rounded-md text-sm hover:text-foreground transition-colors"
                                        >
                                            📄 Copy all (sorted)
                                        </button>
                                    </div>

                                    {/* Vital Few - DO THESE */}
                                    <div
                                        onClick={() => copyTaskSection(vitalFew, '🔥 DO THESE (80% of your results)')}
                                        className="cursor-pointer hover:bg-accent/50 transition-colors border-b border-border"
                                    >
                                        <div className="p-6 bg-purple-500/10">
                                            <h3 className="text-lg font-bold text-purple-400 mb-2">
                                                🔥 DO THESE FIRST ({vitalFew.length} tasks)
                                            </h3>
                                            <p className="text-purple-400 font-medium text-sm">
                                                These drive 80% of your results → Copy & focus on these
                                            </p>
                                        </div>
                                        <div className="p-6 space-y-3">
                                            {vitalFew.map((task, index) => (
                                                <div key={index} className="flex items-start gap-3 p-3 bg-purple-500/5 rounded-md border border-purple-500/20">
                                                    <span className="bg-purple-500/20 text-purple-400 px-2 py-1 rounded-full text-xs font-bold min-w-8 text-center">
                                                        {task.impact_score}
                                                    </span>
                                                    <p className="text-foreground text-sm font-medium leading-relaxed">
                                                        {task.task}
                                                    </p>
                                                </div>
                                            ))}
                                        </div>
                                    </div>

                                    {/* Trivial Many - ARCHIVE THESE */}
                                    {trivialMany.length > 0 && (
                                        <div
                                            onClick={() => copyTaskSection(trivialMany, '🗂️ ARCHIVE THESE (Low impact)')}
                                            className="cursor-pointer hover:bg-accent/30 transition-colors"
                                        >
                                            <div className="p-6 bg-secondary/30">
                                                <h3 className="text-lg font-bold text-muted-foreground mb-2">
                                                    🗂️ ARCHIVE THESE ({trivialMany.length} tasks)
                                                </h3>
                                                <p className="text-muted-foreground font-medium text-sm">
                                                    Low impact tasks → Copy to your archive/someday list
                                                </p>
                                            </div>
                                            <div className="p-6 max-h-80 overflow-y-auto space-y-2">
                                                {trivialMany.map((task, index) => (
                                                    <div key={index} className="flex items-start gap-3 opacity-70">
                                                        <span className="bg-secondary text-muted-foreground px-2 py-0.5 rounded text-xs min-w-7 text-center">
                                                            {task.impact_score}
                                                        </span>
                                                        <p className="text-muted-foreground text-xs leading-relaxed">
                                                            {task.task}
                                                        </p>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                    )}
                                </>
                            )}
                        </div>
                    )}
                </div>
            </main>

            {/* Login Dialog */}
            <CleanLoginDialog
                open={showLoginDialog}
                onClose={() => setShowLoginDialog(false)}
            />
        </div>
    );
};

export default LandingPage;